#+TITLE: Emacs Configuration
#+AUTHOR: Xavier Capaldi
#+PROPERTY: header-args :results silent :exports code
#+PROPERTY: header-args :tangle init.el

This is my literate emacs configuration.
It currently uses the native ~package.el~ due to bug on MacOS.
Otherwise it tries to use a limited set of packages that mostly augment the natural emacs workflow.

* early init file
The [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][early init file]] is loaded before the package system or GUI is initialized.
We would also use it to disable ~package.el~ if we could use ~elpaca~ for package management.
However there appears to be a [[https://debbugs.gnu.org/cgi/bugreport.cgi?bug=59081][bug]] on emacs startup in MacOS Ventura.
None of the suggested solutions work so I'll manually run the configuration on emacs startup.
This means the package manager will be initialized already.
Rather than deal with any complications, I'll just use ~package.el~ for now.

We would also use it to disable graphical features before start but instead since we are manually running this config, I put at the head of =init.el=.

#+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'darwin) "init.el" "early-init.el")
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)
(tool-bar-mode -1)
#+END_SRC

* bootstrap use-package
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))

(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+END_SRC

* general emacs settings
#+BEGIN_SRC emacs-lisp :noweb yes
(use-package emacs
  :config
  <<LOAD_THEME>>
  (when (equal system-type 'darwin)
    <<REBIND_MAC_KEYS>>
    <<MAC_FONTS>>))
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref LOAD_THEME
(load-theme 'modus-operandi t)
#+END_SRC

** Fonts
#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref MAC_FONTS
(when (member "Monaco" (font-family-list))
      (add-to-list 'initial-frame-alist '(font . "Monaco-13:regular"))
      (add-to-list 'default-frame-alist '(font . "Monaco-13:regular")))
(set-fontset-font t 'symbol (font-spec :family "Apple Symbols") nil 'prepend)
(set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend)
(setq-default line-spacing 0.1)
#+END_SRC

** Remap keys on Macos
#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref REBIND_MAC_KEYS
(setq mac-command-modifier 'meta)
(setq mac-option-modifier 'super)
#+END_SRC

* [[https://github.com/tabfugnic/asdf.el][asdf]]
asdf is a [[https://asdf-vm.com/][version manager]] used at my work to control the versions of some developer tools.
The corresponding emacs package does all necessary environment setup so tools installed by asdf are accessible in emacs.
Because we can't use =elpaca.el= to install from source on MacOS currently, this package must be cloned locally.

#+BEGIN_SRC emacs-lisp
(use-package asdf
  :load-path "~/Checkout/asdf.el"
  :if (eq system-type 'darwin)
  :config (asdf-enable))
#+END_SRC

* [[https://github.com/tuh8888/chezmoi.el][chezmoi]]
chezmoi is a [[https://www.chezmoi.io/][dotfiles manager]] that I use to manage my configurations (including this one).
This package exposes some chezmoi commands to emacs.

#+BEGIN_SRC emacs-lisp
(use-package chezmoi
  :ensure t)
#+END_SRC

* [[https://github.com/minad/consult][consult]]                                                             :minad:
#+BEGIN_SRC emacs-lisp
(use-package consult
  ;; Enable automatic preview at point in the *Completions* buffer.
  ;; This is relevant when you use the default completion UI,
  ;; and not necessary for Vertico, Selectrum, etc.
  :ensure t
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :bind (:map isearch-mode-map
  ("C-c l" . consult-line)))
#+END_SRC

* [[https://github.com/zerolfx/copilot.el][copilot]]
This package integrate Github's [[https://github.com/features/copilot][Copilot]] with emacs.
The license to Copilot is provided through my work.
Because we can't use =elpaca.el= to install from source on MacOS currently, this package must be cloned locally.

#+BEGIN_SRC emacs-lisp
(use-package copilot
  :load-path "~/Checkout/copilot.el"
  :if (eq system-type 'darwin)
  :hook (prog-mode . copilot-mode))
#+END_SRC

* [[https://github.com/minad/corfu][corfu]]                                                               :minad:
This package provides a completion popup window.
There is a way to do completions using =consult= in the minibuffer but if you use that solution you cannot update the completion with further input.

#+BEGIN_SRC emacs-lisp
(use-package corfu
  :ensure t
  :init
  (global-corfu-mode))
#+END_SRC

* [[https://github.com/jacktasia/dumb-jump][dumb-jump]]
This package uses =grep=, =The Silver Searcher= or =ripgrep= along with some baked language heuristics to implement a fast go-to-definiton command.
LSP should usually handle this functionality but =dumb-jump= is a solid fallback that just works without configuration.

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :ensure t
  :config
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+END_SRC

* [[https://github.com/editorconfig/editorconfig-emacs][editorconfig]]
This is an [[https://editorconfig.org/][EditorConfig]] plugin for Emacs.
While ~editorconfig-mode~ is enabled, most EditorConfig settings in projects will be respected.

#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :ensure t
  :config (editorconfig-mode 1))
#+END_SRC

* [[https://github.com/joaotavora/eglot][eglot]]                                                          :joaotavora:
This package will become the built-in [[https://microsoft.github.io/language-server-protocol/][language server protocol (LSP)]] in Emacs.

#+BEGIN_SRC emacs-lisp
(use-package eglot
  :ensure t
  :after (project flymake xref)
  :commands eglot)
#+END_SRC

* [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]]                                              :purcell:
Emacs on MacOS cannot access path properly.
This package allows Emacs to access the same environment variables as in the shell.

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :if (memq window-system '(mac ns x))
  :init (exec-path-from-shell-initialize))
#+END_SRC

* [[https://github.com/dominikh/go-mode.el][go-mode]]
This package provides standard language support for the Go programming language.
In addition to syntax highlighting and basic semantic motions, it provides integrations with several Go tools like =gofmt= and [[https://go.dev/play/][Go Playground]].

#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :ensure t
  :mode (("\\.go\\'" . go-mode)
         ("\\.mod\\'" . go-dot-mod-mode)))
#+END_SRC
	 
* js
The built in javascript mode.

#+BEGIN_SRC emacs-lisp
(use-package js
  :ensure nil
  :mode "\\.js[x]\\'")
#+END_SRC

* [[https://magit.vc/][magit]]
This package is a comprehensive [[https://git-scm.com/][git]] porcelain in Emacs.
Emacs has =vc-mode= which is built-in but magit is widely regarded as one of the best git interfaces.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC

* [[https://github.com/minad/marginalia][marginalia]]                                                          :minad:
Add helpful marginalia to minibuffer completions

#+BEGIN_SRC emacs-lisp
(use-package marginalia
  :ensure t
  :bind (:map minibuffer-local-map
              ("M-A" . marginalia-cycle))
  :init (marginalia-mode 1))
#+END_SRC

* [[https://github.com/oantolin/orderless][orderless]]                                                        :oantolin:
This package adds an advanced completions style to Emacs.
The style is space-separated and each separated block can match using several different completion patterns.
It sounds complex but is actually very intuitive to use compared to most of the built-in completions.

#+BEGIN_SRC emacs-lisp
(use-package orderless
  :ensure t
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

* org
#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  ;; Org-babel supported languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     (python . t)))
  :custom
  (org-adapt-indentation nil)
  (org-edit-src-content-indentation 0))
#+END_SRC

* [[https://github.com/protocolbuffers/protobuf/blob/main/editors/protobuf-mode.el][protobuf-mode]]
[[https://protobuf.dev/][Protocol Buffers]] are used to serialize structured data.
We use them in my work and this package adds support for the protobuf syntax.

#+BEGIN_SRC emacs-lisp
(use-package protobuf-mode
  :ensure t
  :if (eq system-type 'darwin)
  :mode ("\\.proto\\'"))
#+END_SRC

* [[https://github.com/hcl-emacs/terraform-mode][terraform-mode]]
This package adds support for [[https://www.terraform.io/][Terraform]] configuration files which we use at my work.

#+BEGIN_SRC emacs-lisp
(use-package terraform-mode
  :ensure t
  :if (eq system-type 'darwin)
  :mode ("\\.tf\\'" . terraform-mode))
#+END_SRC

* [[https://github.com/emacs-typescript/typescript.el][typescript-mode]]
This package add support for the Typescript programming language to Emacs.

#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :ensure t
  :mode "\\.ts[x]\\'")
#+END_SRC

* [[https://github.com/minad/vertico][vertico]]                                                             :minad:
An improved vertical completion UI for Emacs.
This synergizes nicely with marginalia and orderless.

#+BEGIN_SRC emacs-lisp
(use-package vertico
  :ensure t
  :init (vertico-mode 1))
#+END_SRC

* [[https://github.com/casouri/vundo][vundo]]
Emacs undo system is really hard to follow.
This package adds a undo tree visualization.

#+BEGIN_SRC emacs-lisp
(use-package vundo
  :ensure t
  :commands (vundo)
  :bind ("C-c u" . vundo))
#+END_SRC

* [[https://github.com/justbur/emacs-which-key][which-key]]
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :custom
  ;; Allow C-h to trigger which-key before it is done automatically
  (which-key-show-early-on-C-h t)
  ;; Don't show normally but refresh quickly when triggered
  (which-key-idle-delay 10000)
  (which-key-idle-secondary-delay 0.05)
  :init (which-key-mode))
#+END_SRC
